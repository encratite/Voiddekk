RPC API:

// Out of game API

	// Authentication

	// This is the first out of two methods to log into an account
	// Associate this connection with an external Mozilla Persona
	// This might or might not result in a login into an actual game account on the system
	// The result contains the following fields:
	// 1. did the authentication succeed
	// 2. (optional) is a game account available for this Persona
	// 3. (optional) session key
	// The case of the user already beign authenticated results in an exception instead
	AuthenticationResult AuthenticatePersona(string assertion)

	// This is the second out of two methods to log into an account
	// It relies on having used AuthenticatePersona in the past
	// It reuses the session key that was stored in a cookie and compares them to an entry in the database
	// Reuses the same data structure for the response
	// This also associates the connection with a Persona
	AuthenticationResult AuthenticateSession(string key)

	// The User must be associated with a Persona to register an account
	// The result contains the following fields:
	// 1. did the registration succeed
	// 2. (optional) error message
	// The cases of the user not being authenticated or already having registered results in an exception instead
	// If the registration succeeded, the player is also logged into that game account at this point
	RegistrationResult Register(string name)

	// All of the remaining calls require a game account

	// If name == null, it returns information about the account logged into
	PlayerInfo GetPlayerInfo(string name)

	// Deck handling

	List<Deck> GetDecks()
	int AddDeck(string name, Deck deck)
	void RemoveDeck(int deckId)

	// Custom PvP games

	List<string> GetGames()
	// Returns the name of the game created, the title is generated automatically and in the case of private games it returns a secret game key required to join the game
	string CreateGame(int deckId, bool isPrivate)
	// Causes a game to start
	void JoinGame()

	// Single-player and custom AI games will be added later

// In game API

	void EndTurn()
	void DrawCard()
	void DeployUnit(int cardId, Position position)
	void UseUnitAbility(int cardId, int unitId)
	void UseLaneAbility(int cardId, int lane)
	void UseGlobalAbility(int cardId)
	void AttackUnit(int attackerId, int defenderId)
	void AttackPlayer(int attackerId)
	void MoveUnit(int unitId, Position position)

Events:

// Out of game events

	GameStarted(GameInfo game)

// In game events

	NewTurn(int playerId)
	// Specify the type of a card, this is consistently called prior to the introduction of a new card ID
	NewCard(int cardId, int type)
	// Card information is only revealed to the client of the player who drew the card, this message is not broadcast
	CardDrawn(int cardId)
	UpdateCardCount(int playerId, int handCards, int deckCards)
	UpdateEnergy(int playerId, int energy)
	UpdatePlayerHealth(int playerId, int newHealth)
	// This is used to indicate both damage and states such as immobilisation, poison, shield, weakening
	UpdateUnitState(int cardId, int health, List<UnitFlag> flags)
	UnitAbilityUsed(int cardId, int unitId)
	LaneAbilityUsed(int cardId, int lane)
	GlobalAbilityUsed(int cardId)
	UnitAttacked(int attackerId, int defenderId)
	PlayerAttacked(int attackerId, int playerId)
	UnitMoved(int unitId, Position position)
	UnitDestroyed(int unitId)
	GameOver(int winnerId)